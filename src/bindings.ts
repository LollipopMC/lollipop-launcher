// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands */

/** tauri-specta globals */

import { invoke as TAURI_INVOKE } from '@tauri-apps/api/core'
import * as TAURI_API_EVENT from '@tauri-apps/api/event'
import type { WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow'

export const commands = {
  async helloWorld(name: string): Promise<string> {
    return await TAURI_INVOKE('hello_world', { name })
  },
  async tag(): Promise<TagReturn> {
    return await TAURI_INVOKE('tag')
  },
}

/** user-defined events */

export const events = __makeEvents__<{
  demoEvent: DemoEvent
}>({
  demoEvent: 'demo-event',
})

/** user-defined statics */

/** user-defined types */

export type DemoEvent = string
export interface MinecraftVersion { type_: MinecraftVersionType, version: string }
export type MinecraftVersionType = 'Release' | 'Snapshot' | 'Others'
export interface Mod { count: number, type_: ModApiType }
export type ModApiType = 'Forge' | 'Fabric' | 'LiteLoader'
export type Tag = { Minecraft: MinecraftVersion } | { Mod: Mod }
export interface TagReturn { tags: Tag[] }

interface __EventObj__<T> {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>
}

export type Result<T, E> =
  | { status: 'ok', data: T }
  | { status: 'error', error: E }

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T]

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg)
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg)
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg)
            }
          },
        })
      },
    },
  )
}
